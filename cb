#! /usr/local/bin/python

import sys
import os

if sys.platform == "darwin":
    C_COMPILER = "gcc"
else:
    print("This build script is tested only at mac os")
    os._exit(1)

C_STD = "-std=c11"
C_OPTIONS = [
    # "-ggdb",
    "-O3",
    "-Wall",
    "-Wextra",
    "-Wpedantic",
    "-Wconversion",
    "-Werror=return-type",
]
TARGET = "aedif"
SRCS = [
    "./src/main.c",
    "./src/lua_debug.c",
    "./src/conversion.c",
    "./src/registered_funcs.c",
    "./src/predefined_vars.c",
    "./src/project_data.c",
    "./src/commandline_parser.c",
]
LIBS = [
    "-llua",
]
LIB_DIRS = ["-Lbuild/lib"]
INCLUDES = [
    "-Ilib/lua-5.4.3/src",
    "-Ilib",
]

# Functions


def cat_to_str(list):
    return " ".join(list)


def print_info(string, emph=False):
    if emph:
        print()
        print("       \x1b[1m\x1b[4m" + string + "\x1b[0m")
    else:
        print("[INFO] " + string)


def run_with(*args):
    argument = ""
    for arg in args:
        argument += arg
        argument += " "
    print_info(argument)
    return os.system(argument)


def change_extension(filename, extension):
    pre, oldext = os.path.splitext(filename)
    return pre + extension


def change_file_location(filename, location):
    basename = os.path.basename(filename)
    if location[-1] == "/":
        return location + basename
    else:
        return location + "/" + basename


######################
# Main Building Part #
######################
build_arguments = ["build", "b", "install", "i"]

if len(sys.argv) > 1:
    if sys.argv[1] in build_arguments:
        objs_list = []

        # making directories
        run_with("mkdir -p ./build/obj")
        run_with("mkdir -p ./build/lib")
        run_with("mkdir -p ./build/bin")

        run_with("make -C ./lib/lua-5.4.3/")
        run_with("mv ./lib/lua-5.4.3/src/liblua.a ./build/lib")

        ###########################
        # Building Script Example #
        ###########################
        print_info("Building Aedif", emph=True)
        objs_list.clear()
        for src in SRCS:
            objs_list.append(
                change_file_location(change_extension(src, ".o"), "./build/obj")
            )
            run_with(
                C_COMPILER,
                C_STD,
                cat_to_str(C_OPTIONS),
                cat_to_str(INCLUDES),
                "-c",
                src,
                "-o",
                objs_list[-1],
            )
        run_with(
            C_COMPILER,
            C_STD,
            cat_to_str(LIB_DIRS),
            cat_to_str(LIBS),
            cat_to_str(objs_list),
            "-o",
            TARGET,
        )
        run_with("mv", TARGET, "./build/bin")

        if sys.argv[1] == "install" or sys.argv[1] == "i":
            run_with("mv ./build/bin/* ~/.local/bin")

        #### END OF COMPILE CODES ####

    elif sys.argv[1] == "clean" or sys.argv[1] == "c":
        run_with("make clean -C ./lib/lua")
        run_with("rm -r ./build")
else:
    print("Usage: ./cpp-build [subcommands]")
    print()
    print("SubCommands:")
    print("build      build the project")
    print("install    install the project into ./local/bin")
    print("clean      clean the object and execute files")
